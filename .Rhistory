if(Sys.which(dependency_list[i]) == "") append(uninstalled_list, dependency_list[i])
}
print(uninstalled_list)
if(length(uninstalled_list) != 0) stop(paste("Dependency", paste(uninstalled_list, collapse = ","),"is not installed."))
}
check_dependency()
for(i in range(1:length(dependency_list)+1)){
print(i)
if(Sys.which(dependency_list[i]) == "") append(uninstalled_list, dependency_list[i])
}
for(i in range(1:length(dependency_list))){
print(i)
if(Sys.which(dependency_list[i]) == "") append(uninstalled_list, dependency_list[i])
}
length(dependency_list)
check_dependency <- function(test = FALSE) {
dependency_list <- c("npxd")
uninstalled_list <- c()
for (i in seq_along(dependency_list)) {
if (Sys.which(dependency_list[i]) == "") {
uninstalled_list <- append(uninstalled_list, dependency_list[i])
}
}
if (length(uninstalled_list) != 0) {
stop(paste("Dependency", paste(uninstalled_list, collapse = ","), "is not installed."))
}
}
check_dependency()
check_dependency <- function(test = FALSE) {
dependency_list <- c("npx")
uninstalled_list <- c()
for (i in seq_along(dependency_list)) {
if (Sys.which(dependency_list[i]) == "") {
uninstalled_list <- append(uninstalled_list, dependency_list[i])
}
}
if (length(uninstalled_list) != 0) {
stop(paste("Dependency", paste(uninstalled_list, collapse = ","), "is not installed."))
}
}
check_dependency()
library(executablePackeR)
executablePackeR::pack_macos()
library(executablePackeR)
executablePackeR::pack_macos()
executablePackeR::pack_macos()
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
library(executablePackeR)
pack_macos()
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
pack_macos <- function(app_name = "myapp"){
check_dependency()
print(getwd())
if(app_name == "app") stop("App name cannot be 'app'. Use different name(i. e. 'myapp')")
}
pack_macos()
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
library(executablePackeR)
source("~/Desktop/zarathu/executablePackeR/R/pack_macos.R")
check_electron_forge_cli_installed <- function() {
# Command to check if @electron-forge/cli is installed
command <- "npm"
args <- c("list", "-g", "@electron-forge/cli", "--depth=0")
# Execute command and capture output
output <- system2(command, args, stdout = TRUE, stderr = TRUE)
# Check if @electron-forge/cli is in the output
is_installed <- grepl("@electron-forge/cli@", output)
return(is_installed)
}
check_electron_forge_cli_installed()
# Command to check if @electron-forge/cli is installed
command <- "npm"
args <- c("list", "-g", "@electron-forge/cli", "--depth=0")
# Execute command and capture output
output <- system2(command, args, stdout = TRUE, stderr = TRUE)
library(executablePackeR)
pack_macos <- funcltion(app_name = "myapp"){
pack_macos <- funcltion(app_name = "myapp"){
pack_macos <- funcltion(app_name = "myapp"){
pack_macos <- funcltion(app_name = "myapp"){
pack_macos <- function(app_name = "myapp"){
check_dependency()
print(getwd())
if(app_name == "app") stop("App name cannot be 'app'. Use different name(i. e. 'myapp')")
move_to_new_folder()
prepare_electron()
}
pack_macos()
# Sys.setenv(SHELL = "/bin/bash")
#' @name check_dependency
#' @examples
#' \dontrun{
#' }
#'
check_dependency <- function(test = FALSE) {
dependency_list <- c("npx")
uninstalled_list <- c()
for (i in seq_along(dependency_list)) {
if (Sys.which(dependency_list[i]) == "") {
uninstalled_list <- append(uninstalled_list, dependency_list[i])
}
}
if (length(uninstalled_list) != 0) {
stop(paste("Dependency", paste(uninstalled_list, collapse = ","), "is not installed."))
}
#체크필요
check_electron_forge_installed <- function() {
# Command to check if electron/forge is installed
command <- "npm"
args <- "list -g electron-forge --depth=0"
# Execute command and capture output
output <- system2(command, args, stdout = TRUE, stderr = TRUE)
# Check if electron/forge is in the output
is_installed <- grepl("electron-forge@", output)
return(is_installed)
}
}
#' @name prepare_electron
#' @examples
#' \dontrun{
#' }
prepare_electron <- function(app_name = "myapp"){
project_dir <- getwd()
system2("npx", args=c("create-electron-app", app_name))
print("npx Complete")
unlink(paste0(app_name,"/src"), recursive = TRUE)
copy_from_inst_to_myapp()
print("Copying(copy_from_inst_to_myapp) complete")
setwd(paste0(getwd(),"/",app_name))
file.rename("shiny", paste0(app_name, "/shiny"))
system2("sh", args=c(paste0("./get-r-mac.sh")))
print("Installing R Complete")
source("add-cran-binary-pkgs.R")
print("Installing CRAN binary packages Complete")
}
copy_contents <- function(source, destination) {
# Ensure the destination directory exists
if (!dir.exists(destination)) {
dir.create(destination, recursive = TRUE)
}
# List all items in the source, excluding the 'shiny' directory
items <- list.files(source, full.names = TRUE)
items_to_copy <- items[!items %in% shiny_folder]
# Iterate over each item to copy
for (item in items_to_copy) {
dest_path <- file.path(destination, basename(item))
if (file.info(item)$isdir) {
# If it's a directory, create it and copy its contents
new_dir_path <- file.path(destination, basename(item))
if (!dir.exists(new_dir_path)) dir.create(new_dir_path)
copy_contents(item, new_dir_path)  # Recursive call for directories
} else {
# If it's a file, copy it
file.copy(item, destination)
}
}
}
#' @name move_to_new_folder
move_to_new_folder <- function(){
project_folder <- getwd()
shiny_folder <- file.path(project_folder, "shiny")
if (!dir.exists(shiny_folder)) {
dir.create(shiny_folder)
}
copy_contents(project_folder, shiny_folder)
}
#' @name copy_fron_inst_to_myapp
copy_from_inst_to_myapp <- function(app_name = "myapp") {
# Get the current working directory
project_dir <- getwd()
# Define the destination path
dest_dir <- file.path(project_dir, app_name)
# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
dir.create(dest_dir)
}
# Path to the 'inst' directory in your package
inst_dir <- system.file(package = "executablePackeR")
# Specify the files and folders in 'inst' to copy
# Adjust this list as per your package's structure
files_and_folders <- c("add-cran-binary-pkgs.R", "get-r-mac.sh", "src", "start-shiny.R")
# Copy each specified file/folder
for (item in files_and_folders) {
item_path <- file.path(inst_dir, item)
if (file.exists(item_path)) {
if (file.info(item_path)$isdir) {
# If it's a directory, use recursive copying
dir.create(file.path(dest_dir, basename(item)), recursive = TRUE, showWarnings = FALSE)
file.copy(item_path, dest_dir, recursive = TRUE)
} else {
# If it's a file, copy directly
file.copy(item_path, dest_dir)
}
}
}
}
pack_macos()
#' @name move_to_new_folder
move_to_new_folder <- function(){
project_folder <- getwd()
shiny_folder <- file.path(project_folder, "shiny")
if (!dir.exists(shiny_folder)) {
dir.create(shiny_folder)
}
copy_contents(project_folder, shiny_folder)
}
move_to_new_folder()
project_folder <- getwd()
shiny_folder <- file.path(project_folder, "shiny")
if (!dir.exists(shiny_folder)) {
dir.create(shiny_folder)
}
copy_contents(project_folder, shiny_folder)
move_to_new_folder
move_to_new_folder()
pack_macos()
?file.rename
#' @name prepare_electron
#' @examples
#' \dontrun{
#' }
prepare_electron <- function(app_name = "myapp"){
project_dir <- getwd()
system2("npx", args=c("create-electron-app", app_name))
print("npx Complete")
unlink(paste0(app_name,"/src"), recursive = TRUE)
copy_from_inst_to_myapp()
print("Copying(copy_from_inst_to_myapp) complete")
setwd(paste0(getwd(),"/",app_name))
# Shiny폴더를 electron 앱 폴더 밑으로 옮김
# Check if the source folder exists
shiny_folder <- "shiny"  # Replace with the actual path to the shiny folder
myapp_folder <- app_name  # Replace with the actual path to the myapp folder
destination_path <- file.path(myapp_folder, "shiny")
if (!dir.exists(shiny_folder)) {
stop("The source folder (shiny) does not exist.")
}
# Check if the destination folder exists
if (!dir.exists(myapp_folder)) {
stop("The destination folder (myapp) does not exist.")
}
success <- file.rename(shiny_folder, destination_path)
if (!success) {
stop("Failed to move the folder.")
}
system2("sh", args=c(paste0("./get-r-mac.sh")))
print("Installing R Complete")
source("add-cran-binary-pkgs.R")
print("Installing CRAN binary packages Complete")
}
#' @name prepare_electron
#' @examples
#' \dontrun{
#' }
prepare_electron <- function(app_name = "myapp"){
project_dir <- getwd()
system2("npx", args=c("create-electron-app", app_name))
print("npx Complete")
unlink(paste0(app_name,"/src"), recursive = TRUE)
copy_from_inst_to_myapp()
print("Copying(copy_from_inst_to_myapp) complete")
setwd(paste0(getwd(),"/",app_name))
# Shiny폴더를 electron 앱 폴더 밑으로 옮김
# Check if the source folder exists
shiny_folder <- "shiny"  # Replace with the actual path to the shiny folder
myapp_folder <- app_name  # Replace with the actual path to the myapp folder
destination_path <- file.path(myapp_folder, "shiny")
if (!dir.exists(shiny_folder)) {
stop("The source folder (shiny) does not exist.")
}
# Check if the destination folder exists
if (!dir.exists(myapp_folder)) {
stop("The destination folder (myapp) does not exist.")
}
success <- file.rename(shiny_folder, destination_path)
if (!success) {
stop("Failed to move the folder.")
}
system2("sh", args=c(paste0("./get-r-mac.sh")))
print("Installing R Complete")
source("add-cran-binary-pkgs.R")
print("Installing CRAN binary packages Complete")
}
pack_macos <- function(app_name = "myapp"){
check_dependency()
print("Checking dependency Complete")
print(getwd())
if(app_name == "app") stop("App name cannot be 'app'. Use different name(i. e. 'myapp')")
move_to_new_folder()
prepare_electron()
}
pack_macos()
getwd()
setwd("~/Desktop/zarathu/executablePackeR")
pack_macos()
library(executablePackeR)
executablePackeR::pack_macos()
file.path(getwd(), "shiny")
d
#' @name move_to_new_folder
#' @export
move_to_new_folder <- function(){
project_folder <- getwd()
shiny_folder <- file.path(project_folder, "shiny")
if (!dir.exists(shiny_folder)) {
dir.create(shiny_folder)
}
copy_contents(project_folder, shiny_folder)
}
move_to_new_folder()
#' @name move_to_new_folder
#' @export
move_to_new_folder <- function(){
project_folder <- getwd()
shiny_folder <- file.path(project_folder, "shiny")
if (!dir.exists(shiny_folder)) {
dir.create(shiny_folder)
}
copy_contents(project_folder, shiny_folder)
}
move_to_new_folder()
library(executablePackeR)
executablePackeR::pack_macos()
project_dir <- getwd()
system2("npx", args=c("create-electron-app", app_name))
app_name = "myapp"
project_dir <- getwd()
system2("npx", args=c("create-electron-app", app_name))
# Current PATH
current_path <- Sys.getenv("PATH")
# Directory to append
new_path <- "/Users/limcw/.nvm/versions/node/v20.9.0/bin"
# Append new path to the current PATH
Sys.setenv(PATH = paste(current_path, new_path, sep = ":"))
executablePackeR::pack_macos()
setwd("~/Desktop/zarathu/executablePackeR")
executablePackeR::pack_macos()
library(executablePackeR)
executablePackeR::pack_macos()
setwd("~/Dekstop/zarathu/executablePackeR")
setwd("~/Desktop/zarathu/executablePackeR")
executablePackeR::pack_macos()
library(executablePackeR)
getwd("../")
getwd("../")
setwd("../")
executablePackeR::pack_macos()
library(executablePackeR)
setwd("../")
executablePackeR::pack_macos()
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = NULL)
#' @name copy_fron_inst_to_myapp
#' @export
copy_from_inst_to_myapp <- function(files_and_folders, subdirectory = NULL) {
# Get the current working directory
project_dir <- getwd()
# Define the destination path
dest_dir <- file.path(project_dir, subdirectory)
# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
dir.create(dest_dir)
}
# Path to the 'inst' directory in your package
inst_dir <- system.file(package = "executablePackeR")
# Specify the files and folders in 'inst' to copy
files_and_folders <- c("add-cran-binary-pkgs.R", "get-r-mac.sh", "src", "start-shiny.R", "forge.config.js", "package.json")
# Copy each specified file/folder
for (item in files_and_folders) {
item_path <- file.path(inst_dir, item)
if (file.exists(item_path)) {
if (file.info(item_path)$isdir) {
# If it's a directory, use recursive copying
dir.create(file.path(dest_dir, basename(item)), recursive = TRUE, showWarnings = FALSE)
file.copy(item_path, dest_dir, recursive = TRUE)
} else {
# If it's a file, copy directly
file.copy(item_path, dest_dir)
}
}
}
}
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = NULL)
file.path(getwd())
file.path(getwd(), NULL)
file.path(getwd(), "")
#' @name copy_fron_inst_to_myapp
#' @export
copy_from_inst_to_myapp <- function(files_and_folders, subdirectory = "") {
# Get the current working directory
project_dir <- getwd()
# Define the destination path
dest_dir <- file.path(project_dir, subdirectory)
# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
dir.create(dest_dir)
}
# Path to the 'inst' directory in your package
inst_dir <- system.file(package = "executablePackeR")
# Specify the files and folders in 'inst' to copy
files_and_folders <- c("add-cran-binary-pkgs.R", "get-r-mac.sh", "src", "start-shiny.R", "forge.config.js", "package.json")
# Copy each specified file/folder
for (item in files_and_folders) {
item_path <- file.path(inst_dir, item)
if (file.exists(item_path)) {
if (file.info(item_path)$isdir) {
# If it's a directory, use recursive copying
dir.create(file.path(dest_dir, basename(item)), recursive = TRUE, showWarnings = FALSE)
file.copy(item_path, dest_dir, recursive = TRUE)
} else {
# If it's a file, copy directly
file.copy(item_path, dest_dir)
}
}
}
}
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "")
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "")
#' @name copy_fron_inst_to_myapp
#' @export
copy_from_inst_to_myapp <- function(files_and_folders, subdirectory = "") {
# Get the current working directory
project_dir <- getwd()
# Define the destination path
dest_dir <- file.path(project_dir, subdirectory)
# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
dir.create(dest_dir)
}
# Path to the 'inst' directory in your package
inst_dir <- system.file(package = "executablePackeR")
# Copy each specified file/folder
for (item in files_and_folders) {
item_path <- file.path(inst_dir, item)
if (file.exists(item_path)) {
if (file.info(item_path)$isdir) {
# If it's a directory, use recursive copying
dir.create(file.path(dest_dir, basename(item)), recursive = TRUE, showWarnings = FALSE)
file.copy(item_path, dest_dir, recursive = TRUE)
} else {
# If it's a file, copy directly
file.copy(item_path, dest_dir)
}
}
}
}
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "")
library(executablePackeR)
setwd("../")
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "")
library(executablePackeR)
executablePackeR::pack_macos()
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "", overwrite=TRUE)
#' @name copy_fron_inst_to_myapp
#' @export
copy_from_inst_to_myapp <- function(files_and_folders, subdirectory = "", overwrite=TRUE) {
# Get the current working directory
project_dir <- getwd()
# Define the destination path
dest_dir <- file.path(project_dir, subdirectory)
# Create the destination directory if it doesn't exist
if (!dir.exists(dest_dir)) {
dir.create(dest_dir)
}
# Path to the 'inst' directory in your package
inst_dir <- system.file(package = "executablePackeR")
# Copy each specified file/folder
for (item in files_and_folders) {
item_path <- file.path(inst_dir, item)
if (file.exists(item_path)) {
if (file.info(item_path)$isdir) {
# If it's a directory, use recursive copying
dir.create(file.path(dest_dir, basename(item)), recursive = TRUE, showWarnings = FALSE)
file.copy(item_path, dest_dir, recursive = TRUE, overwrite = overwrite)
} else {
# If it's a file, copy directly
file.copy(item_path, dest_dir, overwrite = overwrite)
}
}
}
}
copy_from_inst_to_myapp(files_and_folders = c("forge.config.js",
"package.json"),
subdirectory = "", overwrite=TRUE)
library(executablePackeR)
executablePackeR::pack_macos()
setwd("../")
executablePackeR::pack_macos()
library(executablePackeR)
library(executablePackeR)
library(executablePackeR)
